import os
import glob
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from datetime import datetime
from netCDF4 import Dataset

# Date range
start_date = pd.to_datetime('2021-10-11')
end_date = pd.to_datetime('2021-10-14')

# Font size configuration
TITLE_FONT_SIZE = 18
AXIS_LABEL_FONT_SIZE = 18
TICK_LABEL_FONT_SIZE = 18
COLORBAR_TITLE_FONT_SIZE = 18
LEGEND_FONT_SIZE = 15

# Conversion function for Local Solar Time from decimal to hh:mm
def decimal_to_hhmm(decimal_time):
    hours = int(decimal_time)
    minutes = int((decimal_time - hours) * 60)
    return f"{hours:02d}:{minutes:02d}"

# Initialize lists to store data for the specified date range
all_meridional_wind = []
all_zonal_wind = []
all_utc_time = []
all_local_solar_time = []
all_altitude = []

# Loop through each day of the date range
for single_date in pd.date_range(start_date, end_date):
    year = single_date.year
    month = single_date.month
    day = single_date.day

    pattern = f"/Users/gildagonzalez/Documents/Datos/ICON DATA/MIGHTI/Red line/{year}/icon_l2-2_mighti_vector-wind-red_{year}{month:02d}{day:02d}_v05r*.nc"
    files = glob.glob(pattern)

    if not files:
        print(f"No file found for {year}-{month:02d}-{day:02d}")
        continue

    filename = files[0]

    try:
        with Dataset(filename, 'r') as nc:
            meridional_wind = nc.variables['ICON_L22_Meridional_Wind'][:]
            zonal_wind = nc.variables['ICON_L22_Zonal_Wind'][:]
            utc_time = nc.variables['ICON_L22_UTC_Time'][:]
            local_solar_time = nc.variables['ICON_L22_Local_Solar_Time'][:]
            local_solar_time = nc.variables['ICON_L22_Local_Solar_Time'][:]
            fill_value = 9.96920997e+36  # Replace with the actual fill value from your data attributes

            # Create a mask to filter out the fill values
            valid_data_mask = local_solar_time != fill_value

            # Apply the mask to the local solar time data
            local_solar_time = np.ma.masked_where(~valid_data_mask, local_solar_time)
            
            altitude = nc.variables['ICON_L22_Altitude'][:]
            wind_quality = nc.variables['ICON_L22_Wind_Quality'][:]
            magnetic_latitude = nc.variables['ICON_L22_Magnetic_Latitude'][:]

            utc_time = [datetime.strptime(time, "%Y-%m-%d %H:%M:%S.%fZ") for time in utc_time]

            # Adjust the Local Solar Time filter for wrapping around midnight
            lst_min = 17.50  # Start a bit before 18:00
            lst_max = 19.01 # End a bit after 19:00
            filter_indices = np.where(
                (local_solar_time >= lst_min) & (local_solar_time < lst_max) &
                (wind_quality == 1) &
                (magnetic_latitude >= -20) & (magnetic_latitude <= 20) &
                valid_data_mask  # include the valid data mask in your conditions
            )

            # Check if altitude is 1D and repeat it to match the other arrays' size if necessary
            if len(altitude.shape) == 1:
                altitude = np.tile(altitude, (len(utc_time), 1))

            # Append filtered data to the lists
            all_meridional_wind.extend(meridional_wind[filter_indices])
            all_zonal_wind.extend(zonal_wind[filter_indices])
            all_utc_time.extend(np.array(utc_time)[filter_indices[0]])
            all_local_solar_time.extend(local_solar_time[filter_indices])
            all_altitude.extend(altitude[filter_indices])
    except Exception as e:
        print(f"An error occurred while processing {filename}: {e}")

# Convert lists to numpy arrays for plotting
all_meridional_wind = np.array(all_meridional_wind)
all_zonal_wind = np.array(all_zonal_wind)
all_utc_time = np.array(all_utc_time)
all_local_solar_time = np.array(all_local_solar_time)
all_altitude = np.array(all_altitude)

# After filtering and before plotting, convert the min and max LST values to hh:mm format to debug
min_lst_hhmm = decimal_to_hhmm(np.min(all_local_solar_time))
max_lst_hhmm = decimal_to_hhmm(np.max(all_local_solar_time))
print("Debugging LST values in hh:mm format:")
print("Min LST in data:", min_lst_hhmm)
print("Max LST in data:", max_lst_hhmm)

# Creating stacked plots for both wind types
fig, axs = plt.subplots(2, 1, figsize=(10, 10), sharex=True)

# After filtering and before plotting, let's print the min and max LST values to debug
print("Debugging LST values:")
print("Min LST in data:", np.min(all_local_solar_time))
print("Max LST in data:", np.max(all_local_solar_time))

# Diagnostic code to inspect the range of data around 18:00
print("Inspecting LST values around 18:00:")
for lst_value in np.nditer(all_local_solar_time):
    if 18.00 <= lst_value < 18.10:  # Adjust this range as needed
        print(decimal_to_hhmm(lst_value))


# Function to add legend with the range of Local Solar Times
def add_lts_legend(ax):
    from matplotlib.lines import Line2D
    legend_elements = [Line2D([0], [0], color='white', marker="o", markersize=0,
                              label=f'Local Solar Time: {min_lst_hhmm}-{max_lst_hhmm} hours')]
    ax.legend(handles=legend_elements, loc='lower center', bbox_to_anchor=(1, 1), fontsize=LEGEND_FONT_SIZE)

# Plotting Meridional Wind
sc_meridional = axs[0].scatter(all_utc_time, all_altitude, c=all_meridional_wind, cmap='jet', marker=",")
axs[0].set_ylabel('Altitude (km)')
axs[0].grid(True)
cbar_meridional = plt.colorbar(sc_meridional, ax=axs[0], label='Meridional Wind (m/s)')
cbar_meridional.ax.tick_params(labelsize=TICK_LABEL_FONT_SIZE)
cbar_meridional.set_label('Meridional Wind (m/s)', fontsize=COLORBAR_TITLE_FONT_SIZE)
add_lts_legend(axs[0])  # Added custom legend

# Plotting Zonal Wind
sc_zonal = axs[1].scatter(all_utc_time, all_altitude, c=all_zonal_wind, cmap='jet', marker=",")
axs[1].set_ylabel('Altitude (km)')
axs[1].xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d'))  # The date format excludes time
axs[1].grid(True)
plt.gcf().autofmt_xdate()
cbar_zonal = plt.colorbar(sc_zonal, ax=axs[1], label='Zonal Wind (m/s)')
cbar_zonal.ax.tick_params(labelsize=TICK_LABEL_FONT_SIZE)
cbar_zonal.set_label('Zonal Wind (m/s)', fontsize=COLORBAR_TITLE_FONT_SIZE)
add_lts_legend(axs[1])  # Custom legend

# Apply font sizes to axes labels, tick labels for both subplots
for ax in axs:
    ax.set_ylabel('Altitude (km)', fontsize=AXIS_LABEL_FONT_SIZE)
    ax.tick_params(axis='both', which='major', labelsize=TICK_LABEL_FONT_SIZE)
    add_lts_legend(ax)

# Adding a title for the entire plot
fig.suptitle(f'ICON L22 Wind Data between -20 and 20 Mag Lat', fontsize=TITLE_FONT_SIZE, y=0.95)

# Save and show the plot
plt.savefig(f'/Users/gildagonzalez/Documents/Datos/STD/PRE/Oct2021/Winds_{year}-{month:02d}_postsunset.png')
plt.show()
